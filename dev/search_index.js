var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Temper-samplers","page":"API","title":"Temper samplers","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"MCMCTempering.tempered\nMCMCTempering.TemperedSampler","category":"page"},{"location":"api/#MCMCTempering.tempered","page":"API","title":"MCMCTempering.tempered","text":"tempered(sampler, inverse_temperatures; kwargs...)\nOR\ntempered(sampler, num_temps; swap_strategy=ReversibleSwap(), kwargs...)\n\nReturn a tempered version of sampler using the provided inverse_temperatures or inverse temperatures generated from num_temps and the swap_strategy.\n\nArguments\n\nsampler is an algorithm or sampler object to be used for underlying sampling and to apply tempering to\nThe temperature schedule can be defined either explicitly or just as an integer number of temperatures, i.e. as:\ninverse_temperatures containing a sequence of 'inverse temperatures' {β₀, ..., βₙ} where 0 ≤ βₙ < ... < β₁ < β₀ = 1     OR\nnum_temps, specifying the integer number of inverse temperatures to include in a generated inverse_temperatures\n\nKeyword arguments\n\nswap_strategy::AbstractSwapStrategy specifies the method for swapping inverse temperatures between chains\nsteps_per_swap::Integer steps are carried out between each attempt at a swap\n\nSee also\n\nTemperedSampler\nFor more on the swap strategies:\nAbstractSwapStrategy\nReversibleSwap\nNonReversibleSwap\nSingleSwap\nSingleRandomSwap\nRandomSwap\nNoSwap\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMCTempering.TemperedSampler","page":"API","title":"MCMCTempering.TemperedSampler","text":"TemperedSampler <: AbstractMCMC.AbstractSampler\n\nA TemperedSampler struct wraps a sampler upon which to apply the Parallel Tempering algorithm.\n\nFields\n\nsampler: sampler(s) used to target the tempered distributions\nchain_to_beta: collection of inverse temperatures β; β[i] correponds i-th tempered model\nswapstrategy: strategy to use for swapping\nadapt: boolean flag specifying whether or not to adapt\nadaptation_states: adaptation parameters\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"Under the hood, MCMCTempering.TemperedSampler is actually just a \"fancy\" representation of a composition (represented using a MCMCTempering.CompositionSampler) of a MCMCTempering.MultiSampler and a MCMCTempering.SwapSampler.","category":"page"},{"location":"api/","page":"API","title":"API","text":"Roughly speaking, the implementation of AbstractMCMC.step for MCMCTempering.TemperedSampler is basically","category":"page"},{"location":"api/","page":"API","title":"API","text":"# 1. Construct the tempered models.\nmultimodel = MultiModel([make_tempered_model(model, β) for β in tempered_sampler.chain_to_beta])\n# 2. Construct the samplers (can be the same one repeated multiple times or different ones)\nmultisampler = MultiSampler([getsampler(tempered_sampler, i) for i = 1:numtemps])\n# 3. Step targeting `multimodel` using a compositoin of `multisampler` and `swapsampler`.\nAbstractMCMC.step(rng, multimodel, multisampler ∘ swapsampler, state; kwargs...)","category":"page"},{"location":"api/","page":"API","title":"API","text":"which in this case is provided by repeated calls to MCMCTempering.make_tempered_model.","category":"page"},{"location":"api/","page":"API","title":"API","text":"MCMCTempering.make_tempered_model","category":"page"},{"location":"api/#MCMCTempering.make_tempered_model","page":"API","title":"MCMCTempering.make_tempered_model","text":"make_tempered_model([sampler, ]model, beta)\n\nReturn an instance representing a model tempered with beta.\n\nThe return-type depends on its usage in compute_logdensities.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"This should be overloaded if you have some custom model-type that does not support the LogDensityProblems.jl-interface. In the case where the model does support the LogDensityProblems.jl-interface, then the following will automatically be constructed","category":"page"},{"location":"api/","page":"API","title":"API","text":"MCMCTempering.TemperedLogDensityProblem","category":"page"},{"location":"api/#MCMCTempering.TemperedLogDensityProblem","page":"API","title":"MCMCTempering.TemperedLogDensityProblem","text":"TemperedLogDensityProblem\n\nA tempered log density function implementing the LogDensityProblem.jl interface.\n\nFields\n\nlogdensity: underlying log density; assumed to implement LogDensityProblems.jl interface\nbeta\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"In addition, for computation of the tempered logdensities, we have","category":"page"},{"location":"api/","page":"API","title":"API","text":"MCMCTempering.compute_logdensities","category":"page"},{"location":"api/#MCMCTempering.compute_logdensities","page":"API","title":"MCMCTempering.compute_logdensities","text":"compute_logdensities(model[, model_other], state, state_other)\n\nReturn (logdensity(model, state), logdensity(model, state_other)).\n\nThe default implementation extracts the parameters from the transitions using MCMCTempering.getparams.\n\nmodel_other can be provided to allow specializations that might be more efficient if we know that state_other is from model_other, e.g. in the case where the log-probability field is already present in state and state_other, and the only difference between logdensity(model, state_other) and logdensity(model_other, state_other) is an easily computable factor, then this can be exploited instead of re-computing the log-densities for both.\n\n\n\n\n\n","category":"function"},{"location":"api/#Swapping","page":"API","title":"Swapping","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Swapping is implemented using the somewhat special MCMCTempering.SwapSampler","category":"page"},{"location":"api/","page":"API","title":"API","text":"MCMCTempering.SwapSampler\nMCMCTempering.swapstrategy","category":"page"},{"location":"api/#MCMCTempering.SwapSampler","page":"API","title":"MCMCTempering.SwapSampler","text":"SwapSampler <: AbstractMCMC.AbstractSampler\n\nFields\n\nstrategy: swap strategy to use\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMCTempering.swapstrategy","page":"API","title":"MCMCTempering.swapstrategy","text":"swapstrategy(sampler::SwapSampler)\n\nReturn the swap-strategy used by sampler.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"warning: Warning\nThis is a rather special sampler because, unlike most other implementations of AbstractMCMC.AbstractSampler, this is not a valid sampler on its own; for this to be sensible it needs to be part of composition (see MCMCTempering.CompositionSampler) with at least one other type of (an actually valid) sampler.","category":"page"},{"location":"api/#Different-swap-strategies","page":"API","title":"Different swap-strategies","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"A MCMCTempering.SwapSampler can be defined with different swapping strategies:","category":"page"},{"location":"api/","page":"API","title":"API","text":"MCMCTempering.AbstractSwapStrategy\nMCMCTempering.ReversibleSwap\nMCMCTempering.NonReversibleSwap\nMCMCTempering.SingleSwap\nMCMCTempering.SingleRandomSwap\nMCMCTempering.RandomSwap\nMCMCTempering.NoSwap","category":"page"},{"location":"api/#MCMCTempering.AbstractSwapStrategy","page":"API","title":"MCMCTempering.AbstractSwapStrategy","text":"AbstractSwapStrategy\n\nRepresents a strategy for swapping between parallel chains.\n\nA concrete subtype is expected to implement the method swap_step.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMCTempering.ReversibleSwap","page":"API","title":"MCMCTempering.ReversibleSwap","text":"ReversibleSwap <: AbstractSwapStrategy\n\nStochastically attempt either even- or odd-indexed swap moves between chains.\n\nSee [SYED19] for more on this approach, referred to as SEO in their paper.\n\n[SYED19]: Syed, S., Bouchard-Côté, Alexandre, Deligiannidis, G., & Doucet, A., Non-reversible Parallel Tempering: A Scalable Highly Parallel MCMC Scheme, arXiv:1905.02939,  (2019).\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMCTempering.NonReversibleSwap","page":"API","title":"MCMCTempering.NonReversibleSwap","text":"NonReversibleSwap <: AbstractSwapStrategy\n\nAt every swap step taken, this strategy deterministically traverses first the odd chain indices, proposing swaps between neighbors, and then in the next swap step taken traverses even chain indices, proposing swaps between neighbors.\n\nSee [SYED19] for more on this approach, referred to as DEO in their paper.\n\n[SYED19]: Syed, S., Bouchard-Côté, Alexandre, Deligiannidis, G., & Doucet, A., Non-reversible Parallel Tempering: A Scalable Highly Parallel MCMC Scheme, arXiv:1905.02939,  (2019).\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMCTempering.SingleSwap","page":"API","title":"MCMCTempering.SingleSwap","text":"SingleSwap <: AbstractSwapStrategy\n\nAt every swap step taken, this strategy samples a single chain index i and proposes a swap between chains i and i + 1.\n\nThis approach goes under a number of names, e.g. Parallel Tempering (PT) MCMC and Replica-Exchange MCMC.[PTPH05]\n\n[PTPH05]: Earl, D. J., & Deem, M. W., Parallel tempering: theory, applications, and new perspectives, Physical Chemistry Chemical Physics, 7(23), 3910–3916 (2005).\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMCTempering.SingleRandomSwap","page":"API","title":"MCMCTempering.SingleRandomSwap","text":"SingleRandomSwap <: AbstractSwapStrategy\n\nAt every swap step taken, this strategy samples two chain indices i and 'j' and proposes a swap between the two corresponding chains.\n\nThis approach is shown to be effective for certain models in [1].\n\n[1]: Malcolm Sambridge, A Parallel Tempering algorithm for probabilistic sampling and multimodal optimization, Geophysical Journal International, Volume 196, Issue 1, January 2014, Pages 357–374, https://doi.org/10.1093/gji/ggt342\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMCTempering.RandomSwap","page":"API","title":"MCMCTempering.RandomSwap","text":"RandomSwap <: AbstractSwapStrategy\n\nThis strategy randomly shuffles all the chain indices to produce floor(numptemps(sampler)/2) pairs of random (not necessarily neighbouring) chain indices to attempt to swap\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMCTempering.NoSwap","page":"API","title":"MCMCTempering.NoSwap","text":"NoSwap <: AbstractSwapStrategy\n\nMainly useful for debugging or observing each chain independently, this overrides and disables all swapping functionality.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"MCMCTempering.swap_step","category":"page"},{"location":"api/#MCMCTempering.swap_step","page":"API","title":"MCMCTempering.swap_step","text":"swap_step([strategy::AbstractSwapStrategy, ]rng, model, sampler, state)\n\nReturn a new state, with temperatures possibly swapped according to strategy.\n\nIf no strategy is provided, the return-value of swapstrategy called on sampler is used.\n\n\n\n\n\n","category":"function"},{"location":"api/#Other-samplers","page":"API","title":"Other samplers","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"To make a sampler work with MCMCTempering.jl, the sampler needs to implement a few methods:","category":"page"},{"location":"api/","page":"API","title":"API","text":"MCMCTempering.getparams\nMCMCTempering.getlogprob\nMCMCTempering.getparams_and_logprob\nMCMCTempering.setparams_and_logprob!!","category":"page"},{"location":"api/#MCMCTempering.getparams","page":"API","title":"MCMCTempering.getparams","text":"getparams([model, ]state)\n\nGet the parameters from the state.\n\nDefault implementation uses getparams_and_logprob.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMCTempering.getlogprob","page":"API","title":"MCMCTempering.getlogprob","text":"getlogprob([model, ]state)\n\nGet the log probability of the state.\n\nDefault implementation uses getparams_and_logprob.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMCTempering.getparams_and_logprob","page":"API","title":"MCMCTempering.getparams_and_logprob","text":"getparams_and_logprob([model, ]state)\n\nReturn a vector of parameters from the state.\n\nSee also: setparams_and_logprob!!.\n\n\n\n\n\n","category":"function"},{"location":"api/#MCMCTempering.setparams_and_logprob!!","page":"API","title":"MCMCTempering.setparams_and_logprob!!","text":"setparams_and_logprob!!([model, ]state, params)\n\nSet the parameters in the state to params, possibly mutating if it makes sense.\n\nSee also: getparams_and_logprob.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"Other useful methods are:","category":"page"},{"location":"api/","page":"API","title":"API","text":"MCMCTempering.saveall","category":"page"},{"location":"api/#MCMCTempering.saveall","page":"API","title":"MCMCTempering.saveall","text":"saveall(sampler)\n\nReturn whether the sampler saves all the transitions or just the last one.\n\n\n\n\n\n","category":"function"},{"location":"api/#Compositions-of-samplers","page":"API","title":"Compositions of samplers","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"MCMCTempering.CompositionSampler","category":"page"},{"location":"api/#MCMCTempering.CompositionSampler","page":"API","title":"MCMCTempering.CompositionSampler","text":"CompositionSampler <: AbstractMCMC.AbstractSampler\n\nA CompositionSampler is a container for a sequence of samplers.\n\nFields\n\nsampler_outer: The outer sampler\nsampler_inner: The inner sampler\nsaveall: Whether to save all the transitions or just the last one\n\nExamples\n\ncomposed_sampler = sampler_inner ∘ sampler_outer # or `CompositionSampler(sampler_inner, sampler_outer, Val(true))`\nAbstractMCMC.step(rng, model, composed_sampler) # one step of `sampler_inner`, and one step of `sampler_outer`\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"This sampler also has its own transition- and state-type","category":"page"},{"location":"api/","page":"API","title":"API","text":"MCMCTempering.CompositionTransition\nMCMCTempering.CompositionState","category":"page"},{"location":"api/#MCMCTempering.CompositionTransition","page":"API","title":"MCMCTempering.CompositionTransition","text":"CompositionTransition\n\nWrapper around the inner and outer transitions obtained from a CompositionSampler.\n\nFields\n\ntransition_outer: The outer transition\ntransition_inner: The inner transition\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMCTempering.CompositionState","page":"API","title":"MCMCTempering.CompositionState","text":"CompositionState\n\nWrapper around the inner and outer states obtained from a CompositionSampler.\n\nFields\n\nstate_outer: The outer state\nstate_inner: The inner state\n\n\n\n\n\n","category":"type"},{"location":"api/#Repeated-sampler-/-composition-with-itself","page":"API","title":"Repeated sampler / composition with itself","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Large compositions can have unfortunate effects on the compilation times in Julia.","category":"page"},{"location":"api/","page":"API","title":"API","text":"To alleviate this issue we also have the MCMCTempering.RepeatedSampler:","category":"page"},{"location":"api/","page":"API","title":"API","text":"MCMCTempering.RepeatedSampler","category":"page"},{"location":"api/#MCMCTempering.RepeatedSampler","page":"API","title":"MCMCTempering.RepeatedSampler","text":"RepeatedSampler <: AbstractMCMC.AbstractSampler\n\nA RepeatedSampler is a container for a sampler and a number of times to repeat it.\n\nFields\n\nsampler: The sampler to repeat\nnum_repeat: The number of times to repeat the sampler\nsaveall: Whether to save all the transitions or just the last one\n\nExamples\n\nrepeated_sampler = sampler^10 # or `RepeatedSampler(sampler, 10, Val(true))`\nAbstractMCMC.step(rng, model, repeated_sampler) # take 10 steps of `sampler`\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"In the case where MCMCTempering.saveall returns false, step for a MCMCTempering.RepeatedSampler simply returns the last transition and state; if it returns true, then the transition is of type MCMCTempering.SequentialTransitions and the state is of type MCMCTempering.SequentialStates.","category":"page"},{"location":"api/","page":"API","title":"API","text":"MCMCTempering.SequentialTransitions\nMCMCTempering.SequentialStates","category":"page"},{"location":"api/#MCMCTempering.SequentialTransitions","page":"API","title":"MCMCTempering.SequentialTransitions","text":"SequentialTransitions\n\nA SequentialTransitions object is a container for a sequence of transitions.\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMCTempering.SequentialStates","page":"API","title":"MCMCTempering.SequentialStates","text":"SequentialStates\n\nA SequentialStates object is a container for a sequence of states.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"This effectively allows you to specify whether or not the \"intermediate\" states should be kept or not.","category":"page"},{"location":"api/","page":"API","title":"API","text":"note: Note\nYou will rarely see MCMCTempering.SequentialTransitions and MCMCTempering.SequentialStates as a user because AbstractMCMC.bundle_samples has been overloaded to these to return the flattened representation, i.e. we \"un-roll\" the transitions in every MCMCTempering.SequentialTransitions.","category":"page"},{"location":"api/#Multiple-or-product-of-samplers","page":"API","title":"Multiple or product of samplers","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"MCMCTempering.MultiSampler","category":"page"},{"location":"api/#MCMCTempering.MultiSampler","page":"API","title":"MCMCTempering.MultiSampler","text":"MultiSampler <: AbstractMCMC.AbstractSampler\n\nA MultiSampler is a container for multiple samplers.\n\nSee also: MultiModel.\n\nFields\n\nsamplers: The samplers\n\nExamples\n\n# `sampler1` targets `model1`, `sampler2` targets `model2`, etc.\nmulti_model = model1 × model2 × model3 # or `MultiModel((model1, model2, model3))`\nmulti_sampler = sampler1 × sampler2 × sampler3 # or `MultiSampler((sampler1, sampler2, sampler3))`\n# Target the joint model.\nAbstractMCMC.step(rng, multi_model, multi_sampler)\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"where the tempered models are represented using a MCMCTempering.MultiModel","category":"page"},{"location":"api/","page":"API","title":"API","text":"MCMCTempering.MultiModel","category":"page"},{"location":"api/#MCMCTempering.MultiModel","page":"API","title":"MCMCTempering.MultiModel","text":"MultiModel <: AbstractMCMC.AbstractModel\n\nA MultiModel is a container for multiple models.\n\nSee also: MultiSampler.\n\nFields\n\nmodels: The models\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"The step for a MCMCTempering.MultiSampler and a [MCMCTempering.MultiModel] is a transition of type MCMCTempering.MultipleTransitions and a state of type MCMCTempering.MultipleStates","category":"page"},{"location":"api/","page":"API","title":"API","text":"MCMCTempering.MultipleTransitions\nMCMCTempering.MultipleStates","category":"page"},{"location":"api/#MCMCTempering.MultipleTransitions","page":"API","title":"MCMCTempering.MultipleTransitions","text":"MultipleTransitions\n\nA container for multiple transitions.\n\nSee also: MultipleStates.\n\nFields\n\ntransitions: The transitions\n\n\n\n\n\n","category":"type"},{"location":"api/#MCMCTempering.MultipleStates","page":"API","title":"MCMCTempering.MultipleStates","text":"MultipleStates\n\nA container for multiple states.\n\nSee also: MultipleTransitions.\n\nFields\n\nstates: The states\n\n\n\n\n\n","category":"type"},{"location":"getting-started/#Getting-started:-a-simple-Mixture-of-Gaussians-example","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"","category":"section"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"Suppose we have a mixture of Gaussians, e.g. something like","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"using Distributions\ntarget_distribution = MixtureModel(\n    Normal,\n    [(-3, 1.5), (3, 1.5), (20, 1.5)],  # parameters\n    [0.5, 0.3, 0.2]                    # weights\n)","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"This is a simple 1-dimensional distribution, so let's visualize it:","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"using StatsPlots\nfigsize = (800, 400)\nplot(target_distribution; components=false, label=nothing, size=figsize)","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"We can convert a Distribution from Distributions.jl into something we can pass to sample for many different samplers by implementing the LogDensityProblems.jl interface:","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"using LogDensityProblems: LogDensityProblems\n\nstruct DistributionLogDensity{D}\n    d::D\nend\n\nLogDensityProblems.logdensity(d::DistributionLogDensity, x) = loglikelihood(d.d, x)\nLogDensityProblems.dimension(d::DistributionLogDensity) = length(d.d)\nLogDensityProblems.capabilities(::Type{<:DistributionLogDensity}) = LogDensityProblems.LogDensityOrder{0}()\n\n# Wrap our target distribution.\ntarget_model = DistributionLogDensity(target_distribution)","category":"page"},{"location":"getting-started/#Metropolis-Hastings-(AdvancedMH.jl)","page":"Getting started: a simple Mixture of Gaussians example","title":"Metropolis-Hastings (AdvancedMH.jl)","text":"","category":"section"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"Immediately one might reach for a standard sampler, e.g. a random-walk Metropolis-Hastings (RWMH) from AdvancedMH.jl and start sampling using sample:","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"using AdvancedMH, MCMCChains, LinearAlgebra\n\nusing StableRNGs\nrng = StableRNG(42) # To ensure reproducbility across devices.\n\nsampler = RWMH(MvNormal(zeros(1), I))\nnum_iterations = 10_000\nchain = sample(\n    rng,\n    target_model, sampler, num_iterations;\n    chain_type=MCMCChains.Chains,\n    param_names=[\"x\"]\n)","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"plot(chain; size=figsize)","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"This doesn't look quite like what we're expecting.","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"plot(target_distribution; components=false, linewidth=2)\ndensity!(chain)\nplot!(size=figsize)","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"Notice how chain has zero probability mass in the left-most component of the mixture!","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"Let's instead try to use a tempered version of RWMH. But before we do that, we need to make sure that AdvancedMH.jl is compatible with MCMCTempering.jl.","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"To do that we need to implement two methods. First we need to tell MCMCTempering how to extract the parameters, and potentially the log-probabilities, from a AdvancedMH.Transition:","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"MCMCTempering.getparams_and_logprob","category":"page"},{"location":"getting-started/#MCMCTempering.getparams_and_logprob-getting-started","page":"Getting started: a simple Mixture of Gaussians example","title":"MCMCTempering.getparams_and_logprob","text":"getparams_and_logprob([model, ]state)\n\nReturn a vector of parameters from the state.\n\nSee also: setparams_and_logprob!!.\n\n\n\n\n\n","category":"function"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"And similarly, we need a way to update the parameters and the log-probabilities of a AdvancedMH.Transition:","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"MCMCTempering.setparams_and_logprob!!","category":"page"},{"location":"getting-started/#MCMCTempering.setparams_and_logprob!!-getting-started","page":"Getting started: a simple Mixture of Gaussians example","title":"MCMCTempering.setparams_and_logprob!!","text":"setparams_and_logprob!!([model, ]state, params)\n\nSet the parameters in the state to params, possibly mutating if it makes sense.\n\nSee also: getparams_and_logprob.\n\n\n\n\n\n","category":"function"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"Luckily, implementing these is quite easy:","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"using MCMCTempering\n\nMCMCTempering.getparams_and_logprob(transition::AdvancedMH.Transition) = transition.params, transition.lp\nfunction MCMCTempering.setparams_and_logprob!!(transition::AdvancedMH.Transition, params, lp)\n    return AdvancedMH.Transition(params, lp)\nend","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"Now that this is done, we can wrap sampler in a MCMCTempering.TemperedSampler","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"inverse_temperatures = 0.90 .^ (0:20)\nsampler_tempered = TemperedSampler(sampler, inverse_temperatures)","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"aaaaand sample!","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"chain_tempered = sample(\n    rng, target_model, sampler_tempered, num_iterations;\n    chain_type=MCMCChains.Chains,\n    param_names=[\"x\"]\n)","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"Let's see how this looks","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"plot(chain_tempered)\nplot!(size=figsize)","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"plot(target_distribution; components=false, linewidth=2)\ndensity!(chain)\ndensity!(chain_tempered)\nplot!(size=figsize)","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"Neato; we've indeed captured the target distribution much better!","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"We can even inspect all of the tempered chains if we so desire","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"chain_tempered_all = sample(\n    rng,\n    target_model, sampler_tempered, num_iterations;\n    chain_type=Vector{MCMCChains.Chains},  # Different!\n    param_names=[\"x\"]\n);","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"plot(target_distribution; components=false, linewidth=2)\ndensity!(chain)\n# Tempered ones.\nfor chain_tempered in chain_tempered_all[2:end]\n    density!(chain_tempered, color=\"green\", alpha=inv(sqrt(length(chain_tempered_all))))\nend\ndensity!(chain_tempered_all[1], color=\"green\", size=figsize)\nplot!(size=figsize)","category":"page"},{"location":"getting-started/#HMC-(AdvancedHMC.jl)","page":"Getting started: a simple Mixture of Gaussians example","title":"HMC (AdvancedHMC.jl)","text":"","category":"section"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"We also do this with AdvancedHMC.jl.","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"using AdvancedHMC: AdvancedHMC\nusing ForwardDiff: ForwardDiff # for automatic differentation of the logdensity\n\n# Creation of the sampler.\nsampler = AdvancedHMC.HMC(0.1, 8)\nsampler_tempered = MCMCTempering.TemperedSampler(sampler, inverse_temperatures)\n\n# Sample!\nnum_iterations = 5_000\nchain = sample(\n    rng,\n    target_model, sampler, num_iterations;\n    chain_type=MCMCChains.Chains,\n    param_names=[\"x\"],\n    n_adapts=0,  # HACK: need this to make AdvancedHMC.jl happy :/\n)\nplot(chain, size=figsize)","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"Then if we want to make it work with MCMCTempering, we define the same methods as before:","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"# Provides a convenient way of \"mutating\" (read: reconstructing) types with different values\n# for specified fields; see usage below.\nusing Setfield: Setfield\n\nfunction MCMCTempering.getparams_and_logprob(state::AdvancedHMC.HMCState)\n    t = state.transition\n    return t.z.θ, t.z.ℓπ.value\nend\n\nfunction MCMCTempering.setparams_and_logprob!!(model, state::AdvancedHMC.HMCState, params, logprob)\n    # NOTE: Need to recompute the gradient because it might be used in the next integration step.\n    hamiltonian = AdvancedHMC.Hamiltonian(state.metric, model)\n    return Setfield.@set state.transition.z = AdvancedHMC.phasepoint(\n        hamiltonian, params, state.transition.z.r;\n        ℓκ=state.transition.z.ℓκ\n    )\nend","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"And then, just as before, we can sample:","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"chain_tempered_all = sample(\n    StableRNG(42),\n    target_model, sampler_tempered, num_iterations;\n    chain_type=Vector{MCMCChains.Chains},\n    param_names=[\"x\"],\n    n_adapts=0,  # HACK: need this to make AdvancedHMC.jl happy :/\n);","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"plot(target_distribution; components=false, linewidth=2)\ndensity!(chain)\n# Tempered ones.\nfor chain_tempered in chain_tempered_all[2:end]\n    density!(chain_tempered, color=\"green\", alpha=inv(sqrt(length(chain_tempered_all))))\nend\ndensity!(chain_tempered_all[1], color=\"green\", size=figsize)\nplot!(size=figsize)","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"Works like a charm!","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"But we're recomputing both the logdensity and the gradient of the logdensity upon every MCMCTempering.setparams_and_logprob!! above! This seems wholly unnecessary in the tempering case, since","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"pi_beta_1(x) = pi(x)^beta_1 = big( pi(x)^beta_2 big)^beta_1  beta_2 = pi_beta_2^beta_1  beta_2","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"i.e. if model in the above is tempered with beta_1 and the params are coming from a model with beta_2, we can could just compute it as","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"(β_1 / β_2) * logprob","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"and similarly for the gradient! Luckily, it's possible to tell MCMCTempering that this should be done by overloading the MCMCTempering.state_from method. In particular, we'll specify that when we're working with two models of type MCMCTempering.TemperedLogDensityProblem and two states of type AdvancedHMC.HMCState, then we can just re-use scale the logdensity and gradient computation from the MCMCTempering.state_from to get the quantities we want, thus avoiding unnecessary computations:","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"MCMCTempering.state_from","category":"page"},{"location":"getting-started/#MCMCTempering.state_from","page":"Getting started: a simple Mixture of Gaussians example","title":"MCMCTempering.state_from","text":"state_from(model_source, state_target, state_source)\nstate_from(model_source, model_target, state_target, state_source)\n\nReturn a new state similar to state_target but updated from state_source, which could be a different type of state.\n\n\n\n\n\n","category":"function"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"using AbstractMCMC: AbstractMCMC\n\nfunction MCMCTempering.state_from(\n    # AdvancedHMC.jl works with `LogDensityModel`, and by default `AbstractMCMC` will wrap\n    # the input model with `LogDensityModel`, thus asusming it implements the\n    # LogDensityProblems.jl-interface, by default.\n    model::AbstractMCMC.LogDensityModel{<:MCMCTempering.TemperedLogDensityProblem},\n    model_from::AbstractMCMC.LogDensityModel{<:MCMCTempering.TemperedLogDensityProblem},\n    state::AdvancedHMC.HMCState,\n    state_from::AdvancedHMC.HMCState,\n)\n    # We'll need the momentum and the kinetic energy from `ze.`\n    z = state.transition.z\n    # From this, we'll need everything else.\n    z_from = state_from.transition.z\n    params_from = z_from.θ\n    logprob_from = z_from.ℓπ.value\n    gradient_from = z_from.ℓπ.gradient\n\n    # `logprob` is actually `β * actual_logprob`, and we want it to be `β_from * actual_logprob`, so\n    # we can compute the \"new\" logprob as `(β_from / β) * logprob_from`.\n    beta = model.logdensity.beta\n    beta_from = model_from.logdensity.beta\n    delta_beta = beta / beta_from\n    logprob_new = delta_beta * logprob_from\n    gradient_new = delta_beta .* gradient_from\n\n    # Construct `PhasePoint`. Note that we keep `r` and `ℓκ` from the original state.\n    return Setfield.@set state.transition.z = AdvancedHMC.PhasePoint(\n        params_from,\n        z.r,\n        AdvancedHMC.DualValue(logprob_new, gradient_new),\n        z.ℓκ\n    )\nend","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"note: Note\nFor a general model we'd also have to do the same for MCMCTempering.compute_logdensities if we want to completely eliminate unnecessary computations, but for AbstractMCMC.LogDensity{<:MCMCTempering.TemperedLogDensityProblem} this is already implemented in MCMCTempering.","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"Now we can do the same but slightly faster:","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"chain_tempered_all = sample(\n    StableRNG(42),\n    target_model, sampler_tempered, num_iterations;\n    chain_type=Vector{MCMCChains.Chains},\n    param_names=[\"x\"],\n    n_adapts=0,  # HACK: need this to make AdvancedHMC.jl happy :/\n);","category":"page"},{"location":"getting-started/","page":"Getting started: a simple Mixture of Gaussians example","title":"Getting started: a simple Mixture of Gaussians example","text":"plot(target_distribution; components=false, linewidth=2)\ndensity!(chain)\n# Tempered ones.\nfor chain_tempered in chain_tempered_all[2:end]\n    density!(chain_tempered, color=\"green\", alpha=inv(sqrt(length(chain_tempered_all))))\nend\ndensity!(chain_tempered_all[1], color=\"green\", size=figsize)\nplot!(size=figsize)","category":"page"},{"location":"#MCMCTempering.jl","page":"Home","title":"MCMCTempering.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tempering methods and more for Markov chain Monte Carlo methods.","category":"page"},{"location":"","page":"Home","title":"Home","text":"MCMCTempering provides implementations of different ways to define tempered samplers and models, in addition to other ways of composing and mixing samplers.","category":"page"}]
}
